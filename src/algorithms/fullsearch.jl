# ------------------------------------------------------------------
# Licensed under the MIT License. See LICENSE in the project root.
# ------------------------------------------------------------------

"""
    FullSearchAccum(maxlag, nlags, distance, estimator)

Accumulate pairs of points in geospatial data with
exhaustive (or full) search.
"""
struct FullSearchAccum{T,D,E} <: VariogramAccumAlgo
  maxlag::T
  nlags::Int
  distance::D
  estimator::E
end

function accumulate(data, var‚ÇÅ, var‚ÇÇ, algo::FullSearchAccum)
  # retrieve algorithm parameters
  maxlag = algo.maxlag
  nlags = algo.nlags
  distance = algo.distance
  estimator = algo.estimator

  # retrieve table and point set
  ùíØ = values(data)
  ùí´ = domain(data)

  # collect vectors for variables
  cols = Tables.columns(ùíØ)
  Z‚ÇÅ = Tables.getcolumn(cols, var‚ÇÅ)
  Z‚ÇÇ = Tables.getcolumn(cols, var‚ÇÇ)

  # lag size
  Œ¥h = maxlag / nlags

  # accumulation type
  V = typeof((Z‚ÇÅ[1] - Z‚ÇÇ[1]) ‚ãÖ (Z‚ÇÅ[1] - Z‚ÇÇ[1]))

  # lag sums and counts
  xsums = zeros(nlags)
  ysums = zeros(V, nlags)
  counts = zeros(Int, nlags)

  # loop over all pairs of points
  @inbounds for j in 1:nelements(ùí´)
    p‚±º = ùí´[j]
    z‚ÇÅ‚±º = Z‚ÇÅ[j]
    z‚ÇÇ‚±º = Z‚ÇÇ[j]
    for i in (j + 1):nelements(ùí´)
      p·µ¢ = ùí´[i]
      z‚ÇÅ·µ¢ = Z‚ÇÅ[i]
      z‚ÇÇ·µ¢ = Z‚ÇÇ[i]

      # evaluate geospatial lag
      h = evaluate(distance, coordinates(p·µ¢), coordinates(p‚±º))
      h > maxlag && continue # early exit if out of range

      # evaluate (cross-)variance
      v = (z‚ÇÅ·µ¢ - z‚ÇÅ‚±º) ‚ãÖ (z‚ÇÇ·µ¢ - z‚ÇÇ‚±º)

      # bin (or lag) where to accumulate result
      lag = ceil(Int, h / Œ¥h)
      lag == 0 && @warn "duplicate coordinates found"

      if 0 < lag ‚â§ nlags && !ismissing(v)
        xsums[lag] += h
        ysums[lag] += v
        counts[lag] += 1
      end
    end
  end

  xsums, ysums, counts
end
